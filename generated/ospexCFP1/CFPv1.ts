// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get speculationId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contributionAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PositionCreated extends ethereum.Event {
  get params(): PositionCreated__Params {
    return new PositionCreated__Params(this);
  }
}

export class PositionCreated__Params {
  _event: PositionCreated;

  constructor(event: PositionCreated) {
    this._event = event;
  }

  get speculationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contributionAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get positionType(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SpeculationCreated extends ethereum.Event {
  get params(): SpeculationCreated__Params {
    return new SpeculationCreated__Params(this);
  }
}

export class SpeculationCreated__Params {
  _event: SpeculationCreated;

  constructor(event: SpeculationCreated) {
    this._event = event;
  }

  get speculationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get speculationScorer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get theNumber(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get speculationCreator(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class SpeculationLocked extends ethereum.Event {
  get params(): SpeculationLocked__Params {
    return new SpeculationLocked__Params(this);
  }
}

export class SpeculationLocked__Params {
  _event: SpeculationLocked;

  constructor(event: SpeculationLocked) {
    this._event = event;
  }

  get speculationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SpeculationScored extends ethereum.Event {
  get params(): SpeculationScored__Params {
    return new SpeculationScored__Params(this);
  }
}

export class SpeculationScored__Params {
  _event: SpeculationScored;

  constructor(event: SpeculationScored) {
    this._event = event;
  }

  get speculationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get upperAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lowerAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get winSide(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class SpeculationTypeAdded extends ethereum.Event {
  get params(): SpeculationTypeAdded__Params {
    return new SpeculationTypeAdded__Params(this);
  }
}

export class SpeculationTypeAdded__Params {
  _event: SpeculationTypeAdded;

  constructor(event: SpeculationTypeAdded) {
    this._event = event;
  }

  get speculationScorer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class CFPv1__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getUpperAmount(): BigInt {
    return this.value0;
  }

  getLowerAmount(): BigInt {
    return this.value1;
  }

  getClaimed(): boolean {
    return this.value2;
  }
}

export class CFPv1__speculationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: i32;
  value6: Address;
  value7: i32;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: i32,
    value6: Address,
    value7: i32,
    value8: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7)),
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8)),
    );
    return map;
  }

  getContestId(): BigInt {
    return this.value0;
  }

  getUpperAmount(): BigInt {
    return this.value1;
  }

  getLowerAmount(): BigInt {
    return this.value2;
  }

  getLockTime(): BigInt {
    return this.value3;
  }

  getSpeculationScorer(): Address {
    return this.value4;
  }

  getTheNumber(): i32 {
    return this.value5;
  }

  getSpeculationCreator(): Address {
    return this.value6;
  }

  getSpeculationStatus(): i32 {
    return this.value7;
  }

  getWinSide(): i32 {
    return this.value8;
  }
}

export class CFPv1 extends ethereum.SmartContract {
  static bind(address: Address): CFPv1 {
    return new CFPv1("CFPv1", address);
  }

  DAOAddress(): Address {
    let result = super.call("DAOAddress", "DAOAddress():(address)", []);

    return result[0].toAddress();
  }

  try_DAOAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("DAOAddress", "DAOAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RELAYER_ROLE(): Bytes {
    let result = super.call("RELAYER_ROLE", "RELAYER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RELAYER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RELAYER_ROLE", "RELAYER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SCOREMANAGER_ROLE(): Bytes {
    let result = super.call(
      "SCOREMANAGER_ROLE",
      "SCOREMANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SCOREMANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SCOREMANAGER_ROLE",
      "SCOREMANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSpeculationAmount(): BigInt {
    let result = super.call(
      "maxSpeculationAmount",
      "maxSpeculationAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxSpeculationAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSpeculationAmount",
      "maxSpeculationAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minSpeculationAmount(): BigInt {
    let result = super.call(
      "minSpeculationAmount",
      "minSpeculationAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minSpeculationAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minSpeculationAmount",
      "minSpeculationAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(param0: BigInt, param1: Address): CFPv1__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256,address):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return new CFPv1__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_positions(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<CFPv1__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256,address):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CFPv1__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  speculationId(): BigInt {
    let result = super.call("speculationId", "speculationId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_speculationId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "speculationId",
      "speculationId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  speculationTimerInterval(): BigInt {
    let result = super.call(
      "speculationTimerInterval",
      "speculationTimerInterval():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_speculationTimerInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "speculationTimerInterval",
      "speculationTimerInterval():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  speculationTimers(param0: BigInt): BigInt {
    let result = super.call(
      "speculationTimers",
      "speculationTimers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_speculationTimers(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "speculationTimers",
      "speculationTimers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  speculationTypes(param0: Address): Address {
    let result = super.call(
      "speculationTypes",
      "speculationTypes(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_speculationTypes(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "speculationTypes",
      "speculationTypes(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  speculations(param0: BigInt): CFPv1__speculationsResult {
    let result = super.call(
      "speculations",
      "speculations(uint256):(uint256,uint256,uint256,uint32,address,int32,address,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new CFPv1__speculationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toAddress(),
      result[7].toI32(),
      result[8].toI32(),
    );
  }

  try_speculations(
    param0: BigInt,
  ): ethereum.CallResult<CFPv1__speculationsResult> {
    let result = super.tryCall(
      "speculations",
      "speculations(uint256):(uint256,uint256,uint256,uint32,address,int32,address,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CFPv1__speculationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toAddress(),
        value[7].toI32(),
        value[8].toI32(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voidTime(): BigInt {
    let result = super.call("voidTime", "voidTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_voidTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("voidTime", "voidTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _DAOAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _speculationSpreadScorer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _speculationTotalScorer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _speculationMoneylineScorer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSpeculationTypeCall extends ethereum.Call {
  get inputs(): AddSpeculationTypeCall__Inputs {
    return new AddSpeculationTypeCall__Inputs(this);
  }

  get outputs(): AddSpeculationTypeCall__Outputs {
    return new AddSpeculationTypeCall__Outputs(this);
  }
}

export class AddSpeculationTypeCall__Inputs {
  _call: AddSpeculationTypeCall;

  constructor(call: AddSpeculationTypeCall) {
    this._call = call;
  }

  get _speculationScorer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddSpeculationTypeCall__Outputs {
  _call: AddSpeculationTypeCall;

  constructor(call: AddSpeculationTypeCall) {
    this._call = call;
  }
}

export class ChangeMaxSpeculationAmountCall extends ethereum.Call {
  get inputs(): ChangeMaxSpeculationAmountCall__Inputs {
    return new ChangeMaxSpeculationAmountCall__Inputs(this);
  }

  get outputs(): ChangeMaxSpeculationAmountCall__Outputs {
    return new ChangeMaxSpeculationAmountCall__Outputs(this);
  }
}

export class ChangeMaxSpeculationAmountCall__Inputs {
  _call: ChangeMaxSpeculationAmountCall;

  constructor(call: ChangeMaxSpeculationAmountCall) {
    this._call = call;
  }

  get _newMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMaxSpeculationAmountCall__Outputs {
  _call: ChangeMaxSpeculationAmountCall;

  constructor(call: ChangeMaxSpeculationAmountCall) {
    this._call = call;
  }
}

export class ChangeVoidTimeCall extends ethereum.Call {
  get inputs(): ChangeVoidTimeCall__Inputs {
    return new ChangeVoidTimeCall__Inputs(this);
  }

  get outputs(): ChangeVoidTimeCall__Outputs {
    return new ChangeVoidTimeCall__Outputs(this);
  }
}

export class ChangeVoidTimeCall__Inputs {
  _call: ChangeVoidTimeCall;

  constructor(call: ChangeVoidTimeCall) {
    this._call = call;
  }

  get _newVoidTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeVoidTimeCall__Outputs {
  _call: ChangeVoidTimeCall;

  constructor(call: ChangeVoidTimeCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributionAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CreatePositionCall extends ethereum.Call {
  get inputs(): CreatePositionCall__Inputs {
    return new CreatePositionCall__Inputs(this);
  }

  get outputs(): CreatePositionCall__Outputs {
    return new CreatePositionCall__Outputs(this);
  }
}

export class CreatePositionCall__Inputs {
  _call: CreatePositionCall;

  constructor(call: CreatePositionCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _speculationAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _contributionAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _positionType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreatePositionCall__Outputs {
  _call: CreatePositionCall;

  constructor(call: CreatePositionCall) {
    this._call = call;
  }
}

export class CreateSpeculationCall extends ethereum.Call {
  get inputs(): CreateSpeculationCall__Inputs {
    return new CreateSpeculationCall__Inputs(this);
  }

  get outputs(): CreateSpeculationCall__Outputs {
    return new CreateSpeculationCall__Outputs(this);
  }
}

export class CreateSpeculationCall__Inputs {
  _call: CreateSpeculationCall;

  constructor(call: CreateSpeculationCall) {
    this._call = call;
  }

  get _contestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lockTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _speculationScorer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _theNumber(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateSpeculationCall__Outputs {
  _call: CreateSpeculationCall;

  constructor(call: CreateSpeculationCall) {
    this._call = call;
  }
}

export class ForfeitSpeculationCall extends ethereum.Call {
  get inputs(): ForfeitSpeculationCall__Inputs {
    return new ForfeitSpeculationCall__Inputs(this);
  }

  get outputs(): ForfeitSpeculationCall__Outputs {
    return new ForfeitSpeculationCall__Outputs(this);
  }
}

export class ForfeitSpeculationCall__Inputs {
  _call: ForfeitSpeculationCall;

  constructor(call: ForfeitSpeculationCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForfeitSpeculationCall__Outputs {
  _call: ForfeitSpeculationCall;

  constructor(call: ForfeitSpeculationCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class LockSpeculationCall extends ethereum.Call {
  get inputs(): LockSpeculationCall__Inputs {
    return new LockSpeculationCall__Inputs(this);
  }

  get outputs(): LockSpeculationCall__Outputs {
    return new LockSpeculationCall__Outputs(this);
  }
}

export class LockSpeculationCall__Inputs {
  _call: LockSpeculationCall;

  constructor(call: LockSpeculationCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LockSpeculationCall__Outputs {
  _call: LockSpeculationCall;

  constructor(call: LockSpeculationCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class ScoreSpeculationCall extends ethereum.Call {
  get inputs(): ScoreSpeculationCall__Inputs {
    return new ScoreSpeculationCall__Inputs(this);
  }

  get outputs(): ScoreSpeculationCall__Outputs {
    return new ScoreSpeculationCall__Outputs(this);
  }
}

export class ScoreSpeculationCall__Inputs {
  _call: ScoreSpeculationCall;

  constructor(call: ScoreSpeculationCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ScoreSpeculationCall__Outputs {
  _call: ScoreSpeculationCall;

  constructor(call: ScoreSpeculationCall) {
    this._call = call;
  }
}

export class UpdateDAOAddressCall extends ethereum.Call {
  get inputs(): UpdateDAOAddressCall__Inputs {
    return new UpdateDAOAddressCall__Inputs(this);
  }

  get outputs(): UpdateDAOAddressCall__Outputs {
    return new UpdateDAOAddressCall__Outputs(this);
  }
}

export class UpdateDAOAddressCall__Inputs {
  _call: UpdateDAOAddressCall;

  constructor(call: UpdateDAOAddressCall) {
    this._call = call;
  }

  get _DAOAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDAOAddressCall__Outputs {
  _call: UpdateDAOAddressCall;

  constructor(call: UpdateDAOAddressCall) {
    this._call = call;
  }
}

export class VoidSpeculationCall extends ethereum.Call {
  get inputs(): VoidSpeculationCall__Inputs {
    return new VoidSpeculationCall__Inputs(this);
  }

  get outputs(): VoidSpeculationCall__Outputs {
    return new VoidSpeculationCall__Outputs(this);
  }
}

export class VoidSpeculationCall__Inputs {
  _call: VoidSpeculationCall;

  constructor(call: VoidSpeculationCall) {
    this._call = call;
  }

  get _speculationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoidSpeculationCall__Outputs {
  _call: VoidSpeculationCall;

  constructor(call: VoidSpeculationCall) {
    this._call = call;
  }
}
