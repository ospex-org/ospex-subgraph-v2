// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Contest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Contest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Contest | null {
    return changetype<Contest | null>(store.get_in_block("Contest", id));
  }

  static load(id: string): Contest | null {
    return changetype<Contest | null>(store.get("Contest", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get awayScore(): i32 {
    let value = this.get("awayScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set awayScore(value: i32) {
    this.set("awayScore", Value.fromI32(value));
  }

  get homeScore(): i32 {
    let value = this.get("homeScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set homeScore(value: i32) {
    this.set("homeScore", Value.fromI32(value));
  }

  get contestCreator(): Bytes | null {
    let value = this.get("contestCreator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contestCreator(value: Bytes | null) {
    if (!value) {
      this.unset("contestCreator");
    } else {
      this.set("contestCreator", Value.fromBytes(<Bytes>value));
    }
  }

  get rundownId(): string | null {
    let value = this.get("rundownId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rundownId(value: string | null) {
    if (!value) {
      this.unset("rundownId");
    } else {
      this.set("rundownId", Value.fromString(<string>value));
    }
  }

  get sportspageId(): string | null {
    let value = this.get("sportspageId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sportspageId(value: string | null) {
    if (!value) {
      this.unset("sportspageId");
    } else {
      this.set("sportspageId", Value.fromString(<string>value));
    }
  }

  get jsonoddsId(): string | null {
    let value = this.get("jsonoddsId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set jsonoddsId(value: string | null) {
    if (!value) {
      this.unset("jsonoddsId");
    } else {
      this.set("jsonoddsId", Value.fromString(<string>value));
    }
  }

  get contestCreationId(): string | null {
    let value = this.get("contestCreationId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contestCreationId(value: string | null) {
    if (!value) {
      this.unset("contestCreationId");
    } else {
      this.set("contestCreationId", Value.fromString(<string>value));
    }
  }

  get leagueId(): i32 {
    let value = this.get("leagueId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set leagueId(value: i32) {
    this.set("leagueId", Value.fromI32(value));
  }

  get league(): string | null {
    let value = this.get("league");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set league(value: string | null) {
    if (!value) {
      this.unset("league");
    } else {
      this.set("league", Value.fromString(<string>value));
    }
  }

  get awayTeamId(): i32 {
    let value = this.get("awayTeamId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set awayTeamId(value: i32) {
    this.set("awayTeamId", Value.fromI32(value));
  }

  get awayTeam(): string | null {
    let value = this.get("awayTeam");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set awayTeam(value: string | null) {
    if (!value) {
      this.unset("awayTeam");
    } else {
      this.set("awayTeam", Value.fromString(<string>value));
    }
  }

  get homeTeamId(): i32 {
    let value = this.get("homeTeamId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set homeTeamId(value: i32) {
    this.set("homeTeamId", Value.fromI32(value));
  }

  get homeTeam(): string | null {
    let value = this.get("homeTeam");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set homeTeam(value: string | null) {
    if (!value) {
      this.unset("homeTeam");
    } else {
      this.set("homeTeam", Value.fromString(<string>value));
    }
  }

  get eventTime(): i32 {
    let value = this.get("eventTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set eventTime(value: i32) {
    this.set("eventTime", Value.fromI32(value));
  }

  get contestStatus(): string {
    let value = this.get("contestStatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contestStatus(value: string) {
    this.set("contestStatus", Value.fromString(value));
  }

  get speculations(): SpeculationLoader {
    return new SpeculationLoader(
      "Contest",
      this.get("id")!.toString(),
      "speculations",
    );
  }
}

export class Speculation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Speculation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Speculation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Speculation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Speculation | null {
    return changetype<Speculation | null>(
      store.get_in_block("Speculation", id),
    );
  }

  static load(id: string): Speculation | null {
    return changetype<Speculation | null>(store.get("Speculation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contest(): string {
    let value = this.get("contest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contest(value: string) {
    this.set("contest", Value.fromString(value));
  }

  get contestId(): string | null {
    let value = this.get("contestId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contestId(value: string | null) {
    if (!value) {
      this.unset("contestId");
    } else {
      this.set("contestId", Value.fromString(<string>value));
    }
  }

  get lockTime(): i32 {
    let value = this.get("lockTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lockTime(value: i32) {
    this.set("lockTime", Value.fromI32(value));
  }

  get speculationScorer(): Bytes | null {
    let value = this.get("speculationScorer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set speculationScorer(value: Bytes | null) {
    if (!value) {
      this.unset("speculationScorer");
    } else {
      this.set("speculationScorer", Value.fromBytes(<Bytes>value));
    }
  }

  get theNumber(): i32 {
    let value = this.get("theNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set theNumber(value: i32) {
    this.set("theNumber", Value.fromI32(value));
  }

  get speculationCreator(): Bytes | null {
    let value = this.get("speculationCreator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set speculationCreator(value: Bytes | null) {
    if (!value) {
      this.unset("speculationCreator");
    } else {
      this.set("speculationCreator", Value.fromBytes(<Bytes>value));
    }
  }

  get upperAmount(): BigInt | null {
    let value = this.get("upperAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set upperAmount(value: BigInt | null) {
    if (!value) {
      this.unset("upperAmount");
    } else {
      this.set("upperAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get lowerAmount(): BigInt | null {
    let value = this.get("lowerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lowerAmount(value: BigInt | null) {
    if (!value) {
      this.unset("lowerAmount");
    } else {
      this.set("lowerAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get winSide(): string {
    let value = this.get("winSide");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set winSide(value: string) {
    this.set("winSide", Value.fromString(value));
  }

  get speculationStatus(): string {
    let value = this.get("speculationStatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set speculationStatus(value: string) {
    this.set("speculationStatus", Value.fromString(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Speculation",
      this.get("id")!.toString(),
      "positions",
    );
  }

  get positionIds(): Array<string> | null {
    let value = this.get("positionIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positionIds(value: Array<string> | null) {
    if (!value) {
      this.unset("positionIds");
    } else {
      this.set("positionIds", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Position", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Position | null {
    return changetype<Position | null>(store.get_in_block("Position", id));
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get speculation(): string {
    let value = this.get("speculation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set speculation(value: string) {
    this.set("speculation", Value.fromString(value));
  }

  get speculationId(): string | null {
    let value = this.get("speculationId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set speculationId(value: string | null) {
    if (!value) {
      this.unset("speculationId");
    } else {
      this.set("speculationId", Value.fromString(<string>value));
    }
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get userId(): string | null {
    let value = this.get("userId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userId(value: string | null) {
    if (!value) {
      this.unset("userId");
    } else {
      this.set("userId", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get contributedUponCreation(): BigInt | null {
    let value = this.get("contributedUponCreation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set contributedUponCreation(value: BigInt | null) {
    if (!value) {
      this.unset("contributedUponCreation");
    } else {
      this.set("contributedUponCreation", Value.fromBigInt(<BigInt>value));
    }
  }

  get contributedUponClaim(): BigInt | null {
    let value = this.get("contributedUponClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set contributedUponClaim(value: BigInt | null) {
    if (!value) {
      this.unset("contributedUponClaim");
    } else {
      this.set("contributedUponClaim", Value.fromBigInt(<BigInt>value));
    }
  }

  get positionType(): string {
    let value = this.get("positionType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set positionType(value: string) {
    this.set("positionType", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get amountClaimed(): BigInt | null {
    let value = this.get("amountClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountClaimed(value: BigInt | null) {
    if (!value) {
      this.unset("amountClaimed");
    } else {
      this.set("amountClaimed", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader("User", this.get("id")!.toString(), "positions");
  }

  get totalSpeculated(): BigInt | null {
    let value = this.get("totalSpeculated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSpeculated(value: BigInt | null) {
    if (!value) {
      this.unset("totalSpeculated");
    } else {
      this.set("totalSpeculated", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalClaimed(): BigInt | null {
    let value = this.get("totalClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalClaimed(value: BigInt | null) {
    if (!value) {
      this.unset("totalClaimed");
    } else {
      this.set("totalClaimed", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalClaimable(): BigInt | null {
    let value = this.get("totalClaimable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalClaimable(value: BigInt | null) {
    if (!value) {
      this.unset("totalClaimable");
    } else {
      this.set("totalClaimable", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalContributed(): BigInt | null {
    let value = this.get("totalContributed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalContributed(value: BigInt | null) {
    if (!value) {
      this.unset("totalContributed");
    } else {
      this.set("totalContributed", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalLost(): BigInt | null {
    let value = this.get("totalLost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalLost(value: BigInt | null) {
    if (!value) {
      this.unset("totalLost");
    } else {
      this.set("totalLost", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalPending(): BigInt | null {
    let value = this.get("totalPending");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalPending(value: BigInt | null) {
    if (!value) {
      this.unset("totalPending");
    } else {
      this.set("totalPending", Value.fromBigInt(<BigInt>value));
    }
  }

  get wins(): i32 {
    let value = this.get("wins");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set wins(value: i32) {
    this.set("wins", Value.fromI32(value));
  }

  get losses(): i32 {
    let value = this.get("losses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set losses(value: i32) {
    this.set("losses", Value.fromI32(value));
  }

  get ties(): i32 {
    let value = this.get("ties");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set ties(value: i32) {
    this.set("ties", Value.fromI32(value));
  }

  get net(): BigInt | null {
    let value = this.get("net");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set net(value: BigInt | null) {
    if (!value) {
      this.unset("net");
    } else {
      this.set("net", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SpeculationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Speculation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Speculation[]>(value);
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}
