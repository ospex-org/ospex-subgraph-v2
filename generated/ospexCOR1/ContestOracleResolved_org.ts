// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ContestCreated extends ethereum.Event {
  get params(): ContestCreated__Params {
    return new ContestCreated__Params(this);
  }
}

export class ContestCreated__Params {
  _event: ContestCreated;

  constructor(event: ContestCreated) {
    this._event = event;
  }

  get contestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rundownId(): string {
    return this._event.parameters[1].value.toString();
  }

  get sportspageId(): string {
    return this._event.parameters[2].value.toString();
  }

  get jsonoddsId(): string {
    return this._event.parameters[3].value.toString();
  }

  get contestCreator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get contestCriteria(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ContestScored extends ethereum.Event {
  get params(): ContestScored__Params {
    return new ContestScored__Params(this);
  }
}

export class ContestScored__Params {
  _event: ContestScored;

  constructor(event: ContestScored) {
    this._event = event;
  }

  get contestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get awayScore(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get homeScore(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Response extends ethereum.Event {
  get params(): Response__Params {
    return new Response__Params(this);
  }
}

export class Response__Params {
  _event: Response;

  constructor(event: Response) {
    this._event = event;
  }

  get requestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get response(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get err(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ContestOracleResolved_org__contestsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: i32;
  value4: string;
  value5: string;
  value6: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: i32,
    value4: string,
    value5: string,
    value6: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }

  getAwayScore(): BigInt {
    return this.value0;
  }

  getHomeScore(): BigInt {
    return this.value1;
  }

  getContestCreator(): Address {
    return this.value2;
  }

  getContestStatus(): i32 {
    return this.value3;
  }

  getRundownId(): string {
    return this.value4;
  }

  getSportspageId(): string {
    return this.value5;
  }

  getJsonoddsId(): string {
    return this.value6;
  }
}

export class ContestOracleResolved_org__getContestResultValue0Struct extends ethereum.Tuple {
  get awayScore(): BigInt {
    return this[0].toBigInt();
  }

  get homeScore(): BigInt {
    return this[1].toBigInt();
  }

  get contestCreator(): Address {
    return this[2].toAddress();
  }

  get contestStatus(): i32 {
    return this[3].toI32();
  }

  get rundownId(): string {
    return this[4].toString();
  }

  get sportspageId(): string {
    return this[5].toString();
  }

  get jsonoddsId(): string {
    return this[6].toString();
  }
}

export class ContestOracleResolved_org extends ethereum.SmartContract {
  static bind(address: Address): ContestOracleResolved_org {
    return new ContestOracleResolved_org("ContestOracleResolved_org", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SCOREMANAGER_ROLE(): Bytes {
    let result = super.call(
      "SCOREMANAGER_ROLE",
      "SCOREMANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SCOREMANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SCOREMANAGER_ROLE",
      "SCOREMANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SOURCEMANAGER_ROLE(): Bytes {
    let result = super.call(
      "SOURCEMANAGER_ROLE",
      "SOURCEMANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SOURCEMANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SOURCEMANAGER_ROLE",
      "SOURCEMANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SUBSCRIPTIONMANAGER_ROLE(): Bytes {
    let result = super.call(
      "SUBSCRIPTIONMANAGER_ROLE",
      "SUBSCRIPTIONMANAGER_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SUBSCRIPTIONMANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SUBSCRIPTIONMANAGER_ROLE",
      "SUBSCRIPTIONMANAGER_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bytesToUint32(input: Bytes): BigInt {
    let result = super.call("bytesToUint32", "bytesToUint32(bytes):(uint32)", [
      ethereum.Value.fromBytes(input),
    ]);

    return result[0].toBigInt();
  }

  try_bytesToUint32(input: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bytesToUint32",
      "bytesToUint32(bytes):(uint32)",
      [ethereum.Value.fromBytes(input)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contestCreationTime(param0: BigInt): BigInt {
    let result = super.call(
      "contestCreationTime",
      "contestCreationTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_contestCreationTime(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contestCreationTime",
      "contestCreationTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contestId(): BigInt {
    let result = super.call("contestId", "contestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_contestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("contestId", "contestId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contestTimerInterval(): BigInt {
    let result = super.call(
      "contestTimerInterval",
      "contestTimerInterval():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_contestTimerInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contestTimerInterval",
      "contestTimerInterval():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contestTimers(param0: BigInt): BigInt {
    let result = super.call(
      "contestTimers",
      "contestTimers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_contestTimers(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contestTimers",
      "contestTimers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contests(param0: BigInt): ContestOracleResolved_org__contestsResult {
    let result = super.call(
      "contests",
      "contests(uint256):(uint32,uint32,address,uint8,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ContestOracleResolved_org__contestsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toString(),
      result[5].toString(),
      result[6].toString(),
    );
  }

  try_contests(
    param0: BigInt,
  ): ethereum.CallResult<ContestOracleResolved_org__contestsResult> {
    let result = super.tryCall(
      "contests",
      "contests(uint256):(uint32,uint32,address,uint8,string,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ContestOracleResolved_org__contestsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toString(),
        value[5].toString(),
        value[6].toString(),
      ),
    );
  }

  createContestSourceHash(): Bytes {
    let result = super.call(
      "createContestSourceHash",
      "createContestSourceHash():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_createContestSourceHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createContestSourceHash",
      "createContestSourceHash():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  donId(): Bytes {
    let result = super.call("donId", "donId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_donId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("donId", "donId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getContest(
    _contestId: BigInt,
  ): ContestOracleResolved_org__getContestResultValue0Struct {
    let result = super.call(
      "getContest",
      "getContest(uint256):((uint32,uint32,address,uint8,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_contestId)],
    );

    return changetype<ContestOracleResolved_org__getContestResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getContest(
    _contestId: BigInt,
  ): ethereum.CallResult<ContestOracleResolved_org__getContestResultValue0Struct> {
    let result = super.tryCall(
      "getContest",
      "getContest(uint256):((uint32,uint32,address,uint8,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(_contestId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ContestOracleResolved_org__getContestResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkDenominator(): BigInt {
    let result = super.call(
      "linkDenominator",
      "linkDenominator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_linkDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "linkDenominator",
      "linkDenominator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestMapping(param0: Bytes): BigInt {
    let result = super.call(
      "requestMapping",
      "requestMapping(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_requestMapping(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestMapping",
      "requestMapping(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_lastError(): Bytes {
    let result = super.call("s_lastError", "s_lastError():(bytes)", []);

    return result[0].toBytes();
  }

  try_s_lastError(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("s_lastError", "s_lastError():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_lastRequestId(): Bytes {
    let result = super.call(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_s_lastRequestId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "s_lastRequestId",
      "s_lastRequestId():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  s_lastResponse(): Bytes {
    let result = super.call("s_lastResponse", "s_lastResponse():(bytes)", []);

    return result[0].toBytes();
  }

  try_s_lastResponse(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "s_lastResponse",
      "s_lastResponse():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  scoreContestSourceHash(): Bytes {
    let result = super.call(
      "scoreContestSourceHash",
      "scoreContestSourceHash():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_scoreContestSourceHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "scoreContestSourceHash",
      "scoreContestSourceHash():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _donId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get linkTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createContestSourceHashValue(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get scoreContestSourceHashValue(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CreateContestCall extends ethereum.Call {
  get inputs(): CreateContestCall__Inputs {
    return new CreateContestCall__Inputs(this);
  }

  get outputs(): CreateContestCall__Outputs {
    return new CreateContestCall__Outputs(this);
  }
}

export class CreateContestCall__Inputs {
  _call: CreateContestCall;

  constructor(call: CreateContestCall) {
    this._call = call;
  }

  get rundownId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get sportspageId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get jsonoddsId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get source(): string {
    return this._call.inputValues[3].value.toString();
  }

  get encryptedSecretsUrls(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateContestCall__Outputs {
  _call: CreateContestCall;

  constructor(call: CreateContestCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class HandleOracleFulfillmentCall extends ethereum.Call {
  get inputs(): HandleOracleFulfillmentCall__Inputs {
    return new HandleOracleFulfillmentCall__Inputs(this);
  }

  get outputs(): HandleOracleFulfillmentCall__Outputs {
    return new HandleOracleFulfillmentCall__Outputs(this);
  }
}

export class HandleOracleFulfillmentCall__Inputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get err(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall__Outputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class ScoreContestCall extends ethereum.Call {
  get inputs(): ScoreContestCall__Inputs {
    return new ScoreContestCall__Inputs(this);
  }

  get outputs(): ScoreContestCall__Outputs {
    return new ScoreContestCall__Outputs(this);
  }
}

export class ScoreContestCall__Inputs {
  _call: ScoreContestCall;

  constructor(call: ScoreContestCall) {
    this._call = call;
  }

  get _contestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get source(): string {
    return this._call.inputValues[1].value.toString();
  }

  get encryptedSecretsUrls(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ScoreContestCall__Outputs {
  _call: ScoreContestCall;

  constructor(call: ScoreContestCall) {
    this._call = call;
  }
}

export class ScoreContestManuallyCall extends ethereum.Call {
  get inputs(): ScoreContestManuallyCall__Inputs {
    return new ScoreContestManuallyCall__Inputs(this);
  }

  get outputs(): ScoreContestManuallyCall__Outputs {
    return new ScoreContestManuallyCall__Outputs(this);
  }
}

export class ScoreContestManuallyCall__Inputs {
  _call: ScoreContestManuallyCall;

  constructor(call: ScoreContestManuallyCall) {
    this._call = call;
  }

  get _contestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get awayScore(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get homeScore(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ScoreContestManuallyCall__Outputs {
  _call: ScoreContestManuallyCall;

  constructor(call: ScoreContestManuallyCall) {
    this._call = call;
  }
}

export class SetDonIdCall extends ethereum.Call {
  get inputs(): SetDonIdCall__Inputs {
    return new SetDonIdCall__Inputs(this);
  }

  get outputs(): SetDonIdCall__Outputs {
    return new SetDonIdCall__Outputs(this);
  }
}

export class SetDonIdCall__Inputs {
  _call: SetDonIdCall;

  constructor(call: SetDonIdCall) {
    this._call = call;
  }

  get newDonId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetDonIdCall__Outputs {
  _call: SetDonIdCall;

  constructor(call: SetDonIdCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateLinkDenominatorCall extends ethereum.Call {
  get inputs(): UpdateLinkDenominatorCall__Inputs {
    return new UpdateLinkDenominatorCall__Inputs(this);
  }

  get outputs(): UpdateLinkDenominatorCall__Outputs {
    return new UpdateLinkDenominatorCall__Outputs(this);
  }
}

export class UpdateLinkDenominatorCall__Inputs {
  _call: UpdateLinkDenominatorCall;

  constructor(call: UpdateLinkDenominatorCall) {
    this._call = call;
  }

  get newLinkDenominator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateLinkDenominatorCall__Outputs {
  _call: UpdateLinkDenominatorCall;

  constructor(call: UpdateLinkDenominatorCall) {
    this._call = call;
  }
}

export class UpdateRouterAddressCall extends ethereum.Call {
  get inputs(): UpdateRouterAddressCall__Inputs {
    return new UpdateRouterAddressCall__Inputs(this);
  }

  get outputs(): UpdateRouterAddressCall__Outputs {
    return new UpdateRouterAddressCall__Outputs(this);
  }
}

export class UpdateRouterAddressCall__Inputs {
  _call: UpdateRouterAddressCall;

  constructor(call: UpdateRouterAddressCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRouterAddressCall__Outputs {
  _call: UpdateRouterAddressCall;

  constructor(call: UpdateRouterAddressCall) {
    this._call = call;
  }
}

export class UpdateSourceHashCall extends ethereum.Call {
  get inputs(): UpdateSourceHashCall__Inputs {
    return new UpdateSourceHashCall__Inputs(this);
  }

  get outputs(): UpdateSourceHashCall__Outputs {
    return new UpdateSourceHashCall__Outputs(this);
  }
}

export class UpdateSourceHashCall__Inputs {
  _call: UpdateSourceHashCall;

  constructor(call: UpdateSourceHashCall) {
    this._call = call;
  }

  get sourceHashToUpdate(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newSourceHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateSourceHashCall__Outputs {
  _call: UpdateSourceHashCall;

  constructor(call: UpdateSourceHashCall) {
    this._call = call;
  }
}

export class UpdateTimerCall extends ethereum.Call {
  get inputs(): UpdateTimerCall__Inputs {
    return new UpdateTimerCall__Inputs(this);
  }

  get outputs(): UpdateTimerCall__Outputs {
    return new UpdateTimerCall__Outputs(this);
  }
}

export class UpdateTimerCall__Inputs {
  _call: UpdateTimerCall;

  constructor(call: UpdateTimerCall) {
    this._call = call;
  }

  get newContestTimerInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTimerCall__Outputs {
  _call: UpdateTimerCall;

  constructor(call: UpdateTimerCall) {
    this._call = call;
  }
}

export class WithdrawAllLinkCall extends ethereum.Call {
  get inputs(): WithdrawAllLinkCall__Inputs {
    return new WithdrawAllLinkCall__Inputs(this);
  }

  get outputs(): WithdrawAllLinkCall__Outputs {
    return new WithdrawAllLinkCall__Outputs(this);
  }
}

export class WithdrawAllLinkCall__Inputs {
  _call: WithdrawAllLinkCall;

  constructor(call: WithdrawAllLinkCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAllLinkCall__Outputs {
  _call: WithdrawAllLinkCall;

  constructor(call: WithdrawAllLinkCall) {
    this._call = call;
  }
}
